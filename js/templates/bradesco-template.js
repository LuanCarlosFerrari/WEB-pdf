// Template de Extra√ß√£o de Dados - Banco Bradesco
// Suporta: Transfer√™ncia e Boleto
// ATUALIZADO: APENAS Favorecido + Raz√£o Social (Simplificado)

class BradescoTemplate {
    constructor() {
        this.bankName = 'Bradesco';
        this.supportedTypes = ['Transfer√™ncia', 'Boleto'];

    }

    // M√©todo principal para extrair dados do texto
    extractData(text, pageNum) {
        console.group(`üè¶ Extraindo dados do Bradesco da p√°gina ${pageNum}`);

        // üìã LOG BRUTO: Dados da p√°gina recebida
        console.log(`üìÑ DADOS BRUTOS DA P√ÅGINA ${pageNum}:`);
        console.log(`üìè Tamanho do texto: ${text.length} caracteres`);
        console.log(`üî§ Primeiros 300 caracteres:`, text.substring(0, 300));
        console.log(`üî§ √öltimos 300 caracteres:`, text.substring(Math.max(0, text.length - 300)));

        // üìã LOG BRUTO: An√°lise estrutural do texto
        const lines = text.split('\n');
        const nonEmptyLines = lines.filter(line => line.trim().length > 0);
        console.log(`üìä Estrutura do texto:`);
        console.log(`- Total de linhas: ${lines.length}`);
        console.log(`- Linhas com conte√∫do: ${nonEmptyLines.length}`);
        console.log(`- Linhas vazias: ${lines.length - nonEmptyLines.length}`);

        const result = {
            pageNumber: pageNum,
            recipient: 'NENHUM NOME EXTRA√çDO', // üî• Mudei de "Destinat√°rio n√£o encontrado" para ser mais claro
            value: '0,00',
            type: 'Desconhecido',
            rawText: text.substring(0, 200) + '...',
            success: false,
            bank: this.bankName
        };

        try {
            // üìã LOG BRUTO: Preview detalhado do texto
            console.group('üìã EXTRA√á√ÉO BRUTA - PREVIEW DO TEXTO');
            console.log('üîç An√°lise linha por linha (primeiras 15 linhas):');
            lines.slice(0, 15).forEach((line, index) => {
                if (line.trim()) {
                    console.log(`Linha ${index + 1}: "${line.trim()}"`);
                }
            });
            console.groupEnd();


            // Detectar tipo de comprovante
            const documentType = this.detectDocumentType(text);
            result.type = documentType;



            if (documentType === 'Desconhecido') {

                console.groupEnd();
                return result;
            }

            // Extrair dados baseado no tipo
            switch (documentType) {
                case 'Transfer√™ncia':
                    this.extractTransferenciaData(text, result);
                    break;
                case 'Boleto':
                    this.extractBoletoData(text, result);
                    break;
                default:

                    break;
            }

            // Validar se conseguiu extrair dados essenciais
            if (result.recipient && result.recipient !== 'NENHUM NOME EXTRA√çDO') {
                result.success = true;

            } else {



                // Fazer an√°lise completa para debug
                this.analyzeTextForDebug(text);
            }

            console.log(`üìä Resultado final:`, {
                tipo: result.type,
                destinatario: result.recipient,
                valor: result.value,
                sucesso: result.success
            });

        } catch (error) {

            result.recipient = `Erro na p√°gina ${pageNum}`;
        }

        console.groupEnd();
        return result;
    }

    // Detectar tipo de documento Bradesco
    detectDocumentType(text) {
        console.group('üîç EXTRA√á√ÉO BRUTA - DETEC√á√ÉO DE TIPO DE DOCUMENTO');

        const normalizedText = text.toUpperCase().replace(/\s+/g, ' ');

        // üìã LOG BRUTO: Texto normalizado
        console.log(`üìù Texto normalizado (primeiros 500 caracteres):`, normalizedText.substring(0, 500));

        // üìã LOG BRUTO: An√°lise de palavras-chave
        console.log('üîé Procurando palavras-chave espec√≠ficas no texto...');

        // Padr√µes espec√≠ficos para transfer√™ncia do Bradesco
        const transferenciaPatterns = [
            'COMPROVANTE DE TRANSACAO BANCARIA',
            'COMPROVANTE DE TRANSA√á√ÉO BANCARIA',
            'TRANSACAO BANCARIA',
            'TRANSA√á√ÉO BANCARIA',
            'TRANSFERENCIA',
            'TRANSFER√äNCIA',
            'FAVORECIDO',  // üî• Palavra-chave principal para detectar comprovantes com campo Favorecido
            'RAZAO SOCIAL BENEFICIARIO',
            'RAZ√ÉO SOCIAL BENEFICI√ÅRIO'
            // ‚ùå REMOVIDO: Padr√µes com "DESTINAT√ÅRIO", "BENEFICI√ÅRIO", etc. que podem gerar confus√£o
        ];

        // Padr√µes espec√≠ficos para boleto do Bradesco
        const boletoPatterns = [
            'BOLETO DE COBRANCA',
            'BOLETO DE COBRAN√áA',
            'PAGAMENTO DE BOLETO',
            'CEDENTE',
            'SACADO',
            'NOSSO NUMERO',
            'NOSSO N√öMERO',
            'LINHA DIGITAVEL',
            'LINHA DIGIT√ÅVEL',
            'CODIGO DE BARRAS',
            'C√ìDIGO DE BARRAS'
        ];

        // üìã LOG BRUTO: Verifica√ß√£o de padr√µes de transfer√™ncia
        console.log('üîÑ Verificando padr√µes de TRANSFER√äNCIA:');
        let transferenciaFound = false;
        for (const pattern of transferenciaPatterns) {
            const found = normalizedText.includes(pattern);
            console.log(`- "${pattern}": ${found ? '‚úÖ ENCONTRADO' : '‚ùå N√ÉO ENCONTRADO'}`);
            if (found) {
                transferenciaFound = true;
            }
        }

        // üìã LOG BRUTO: Verifica√ß√£o de padr√µes de boleto
        console.log('üìã Verificando padr√µes de BOLETO:');
        let boletoFound = false;
        for (const pattern of boletoPatterns) {
            const found = normalizedText.includes(pattern);
            console.log(`- "${pattern}": ${found ? '‚úÖ ENCONTRADO' : '‚ùå N√ÉO ENCONTRADO'}`);
            if (found) {
                boletoFound = true;
            }
        }

        let detectedType = 'Desconhecido';

        // Verificar transfer√™ncia
        if (transferenciaFound) {
            detectedType = 'Transfer√™ncia';
            console.log('üéØ RESULTADO: Documento identificado como TRANSFER√äNCIA');
        }
        // Verificar boleto
        else if (boletoFound) {
            detectedType = 'Boleto';
            console.log('üéØ RESULTADO: Documento identificado como BOLETO');
        }
        // Fallback: se tem palavras-chave gen√©ricas, assumir transfer√™ncia
        else if (normalizedText.includes('BRADESCO') &&
            (normalizedText.includes('VALOR') || normalizedText.includes('R$'))) {
            detectedType = 'Transfer√™ncia';
            console.log('üéØ RESULTADO: Documento identificado como TRANSFER√äNCIA (fallback)');
        }
        else {
            console.log('‚ùå RESULTADO: Tipo de documento N√ÉO IDENTIFICADO');

            // üìã LOG BRUTO: An√°lise adicional para debug
            console.log('üîç An√°lise adicional para debug:');
            console.log(`- Cont√©m "BRADESCO": ${normalizedText.includes('BRADESCO')}`);
            console.log(`- Cont√©m "VALOR": ${normalizedText.includes('VALOR')}`);
            console.log(`- Cont√©m "R$": ${normalizedText.includes('R$')}`);
        }

        console.groupEnd();
        return detectedType;
    }

    // Extrair dados de transfer√™ncia Bradesco
    extractTransferenciaData(text, result) {
        console.group('üí∞ EXTRA√á√ÉO BRUTA - DADOS DE TRANSFER√äNCIA');

        // üìã LOG BRUTO: An√°lise inicial do texto
        console.log('üìù Iniciando extra√ß√£o de dados de transfer√™ncia...');
        console.log(`üìè Tamanho do texto para an√°lise: ${text.length} caracteres`);

        // üìã LOG BRUTO: Busca por campos-chave
        console.log('üîç Procurando por campos-chave no texto:');
        const keyFields = ['NOME FANTASIA', 'RAZ√ÉO SOCIAL', 'RAZAO SOCIAL', 'FAVORECIDO'];
        keyFields.forEach(field => {
            const found = text.toUpperCase().includes(field);
            const positions = [];
            let index = text.toUpperCase().indexOf(field);
            while (index !== -1) {
                positions.push(index);
                index = text.toUpperCase().indexOf(field, index + 1);
            }
            console.log(`- "${field}": ${found ? '‚úÖ ENCONTRADO' : '‚ùå N√ÉO ENCONTRADO'}${positions.length > 0 ? ` (posi√ß√µes: ${positions.join(', ')})` : ''}`);
        });

        // üéØ PADR√ïES ROBUSTOS - APENAS NOME FANTASIA E RAZ√ÉO SOCIAL BENEFICI√ÅRIO
        const patterns = {
            // üî• PRIORIDADE M√ÅXIMA: Campo "Nome Fantasia Benefici√°rio" (espec√≠fico do Bradesco)
            nomeFantasia: [
                // Padr√£o ULTRA-ESPEC√çFICO para o exemplo TAURUS: "Nome Fantasia Benefici√°rio: TAURUS DIST DE PETROLEO LTDA"
                /Nome\s+Fantasia\s+Benefici√°rio:\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DIST DE PETROLEO LTDA ME SA EIRELI]+?)(?=\s*(?:Raz√£o|CPF|CNPJ|Banco|Ag√™ncia|Conta|\d|\s*$))/i,

                // Padr√£o PRINCIPAL: Nome Fantasia Benefici√°rio: NOME (baseado no exemplo real)
                /Nome\s+Fantasia\s+Benefici√°rio:\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]+?)(?=\s*(?:Raz√£o|CPF|CNPJ|Banco|Ag√™ncia|Conta|\d{2}\.\d{3}|\n|$))/i,

                // Padr√£o ULTRA-ESPEC√çFICO: exatamente "Nome Fantasia Benefici√°rio:" seguido do nome
                /Nome\s+Fantasia\s+Benefici√°rio:\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9]+?)(?=\s*(?:Raz√£o|CPF|CNPJ|Banco|Ag√™ncia|Conta|\d|\n|$))/i,

                // Padr√£o ALTERNATIVO: Nome Fantasia Benefici√°rio seguido de nome (sem dois pontos)
                /Nome\s+Fantasia\s+Benefici√°rio\s+([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:Raz√£o|CPF|CNPJ|Banco|\n|$))/i,

                // Padr√£o RIGOROSO: Nome Fantasia Benefici√°rio com quebra de linha
                /Nome\s+Fantasia\s+Benefici√°rio[:\s]*\n\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:Raz√£o|CPF|CNPJ|\n|$))/i,

                // Padr√£o FALLBACK: Busca flex√≠vel por Nome Fantasia
                /Nome\s+Fantasia[:\s]+([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z\s&.\-\/0-9DE DA DO PROD LTDA ME SA]{3,60})(?=\s*(?:Raz√£o|CPF|CNPJ|Banco|\n))/i
            ],

            // üìã PRIORIDADE 2: Raz√£o Social do Benefici√°rio
            razaoSocial: [
                // Padr√£o PRINCIPAL: Raz√£o Social Benefici√°rio: NOME
                /Raz√£o\s+Social\s+Benefici√°rio:\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]+?)(?=\s*(?:Banco|CPF|CNPJ|\d{3}|$))/i,

                // Padr√£o ALTERNATIVO: Raz√£o Social Benefici√°rio seguido de nome
                /Raz√£o\s+Social\s+Benefici√°rio[:\s]+([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:Banco|CPF|CNPJ|\d{3}|\n|$))/i,

                // Padr√£o RIGOROSO: Raz√£o Social do Benefici√°rio: seguido do nome
                /Raz√£o\s+Social\s+do\s+Benefici√°rio[:\s]*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:CPF|CNPJ|Valor|R\$|\d{2}\.\d{3}|\n|$))/i,

                // Padr√£o SIMPLES: Raz√£o Social: seguido do nome
                /Raz√£o\s+Social[:\s]*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:CPF|CNPJ|Valor|R\$|\d{2}\.\d{3}|\n|$))/i,

                // Padr√£o SEM ACENTO: Razao Social: seguido do nome
                /Razao\s+Social[:\s]*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:CPF|CNPJ|Valor|R\$|\d{2}\.\d{3}|\n|$))/i
            ],

            // üîÑ FALLBACK: Campo "Favorecido" (para documentos mais antigos e TEDs)
            favorecido: [
                // Padr√£o ESPEC√çFICO PARA TED: Favorecido: seguido de nome at√© CPF/CNPJ
                /Favorecido:\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9]+?)(?=\s*(?:CPF|CNPJ))/i,

                // Padr√£o ULTRA-SIMPLES 1: Favorecido: NOME (baseado no exemplo real)
                /Favorecido:\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]+?)(?=\s*Valor|$)/i,

                // Padr√£o SIMPLES 2: Favorecido seguido de qualquer nome em mai√∫scula
                /Favorecido[:\s]+([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:Valor|R\$|Ag[e√™]ncia|\d|\n|$))/i,

                // Padr√£o FLEX√çVEL: Favorecido seguido de nome at√© pr√≥ximo campo banc√°rio
                /Favorecido[:\s]+([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9]{3,50}?)(?=\s*(?:CPF|CNPJ|Banco|Ag√™ncia|\d{3}[\.\-]|\n|$))/i
            ]
        };

        let recipientMatch = null;
        let matchedPattern = '';

        // üìã LOG BRUTO: Testando padr√µes de Nome Fantasia
        console.log('üéØ TESTANDO PADR√ïES DE NOME FANTASIA:');

        // üî• PRIORIDADE 1: SEMPRE tentar NOME FANTASIA BENEFICI√ÅRIO primeiro

        // Debug especial: procurar por "Nome Fantasia" no texto antes de aplicar regex
        const nomeFantasiaIndex = text.toUpperCase().indexOf('NOME FANTASIA');
        if (nomeFantasiaIndex !== -1) {
            const contextStart = Math.max(0, nomeFantasiaIndex - 50);
            const contextEnd = Math.min(text.length, nomeFantasiaIndex + 200);
            const contextText = text.substring(contextStart, contextEnd);
            console.log('üìã LOG BRUTO: Contexto encontrado para "Nome Fantasia":');
            console.log(`"${contextText}"`);

            // An√°lise detalhada da linha espec√≠fica com "Nome Fantasia"
            const lines = text.split('\n');
            const nomeFantasiaLine = lines.find(line => line.toUpperCase().includes('NOME FANTASIA'));
            if (nomeFantasiaLine) {
                console.log('üìã LOG BRUTO: Linha espec√≠fica com "Nome Fantasia":');
                console.log(`"${nomeFantasiaLine}"`);

                // Teste espec√≠fico para "TAURUS DIST DE PETROLEO LTDA"
                if (nomeFantasiaLine.includes('TAURUS')) {
                    console.log('üéØ ENCONTRADO: Exemplo TAURUS na linha de Nome Fantasia!');
                    console.log(`Linha completa: "${nomeFantasiaLine}"`);
                }
            }
        } else {
            console.log('‚ùå Campo "Nome Fantasia" N√ÉO ENCONTRADO no texto');
        }

        for (const [index, pattern] of patterns.nomeFantasia.entries()) {
            console.log(`üîç Testando padr√£o Nome Fantasia ${index + 1}/${patterns.nomeFantasia.length}:`);
            console.log(`Regex: ${pattern.toString()}`);

            // Debug especial para o exemplo TAURUS
            if (text.includes('TAURUS')) {
                console.log('üéØ Texto cont√©m TAURUS - testando padr√£o espec√≠fico...');
                const testMatch = pattern.exec(text);
                if (testMatch) {
                    console.log('‚úÖ MATCH ENCONTRADO para TAURUS!', testMatch[1]);
                } else {
                    console.log('‚ùå Padr√£o n√£o capturou TAURUS');
                }
            }

            recipientMatch = text.match(pattern);
            if (recipientMatch) {
                matchedPattern = 'nomeFantasia';
                console.log(`‚úÖ SUCESSO! Nome Fantasia encontrado com padr√£o ${index + 1}:`);
                console.log(`- Valor bruto capturado: "${recipientMatch[1]}"`);
                console.log(`- Match completo: "${recipientMatch[0]}"`);
                break;
            } else {
                console.log(`‚ùå Padr√£o ${index + 1} n√£o encontrou match`);
            }
        }

        // üìã PRIORIDADE 2: Tentar Raz√£o Social Benefici√°rio se n√£o encontrou Nome Fantasia
        if (!recipientMatch) {
            console.log('üéØ TESTANDO PADR√ïES DE RAZ√ÉO SOCIAL:');
            console.log('‚ÑπÔ∏è Nome Fantasia n√£o encontrado, tentando Raz√£o Social...');

            for (const [index, pattern] of patterns.razaoSocial.entries()) {
                console.log(`üîç Testando padr√£o Raz√£o Social ${index + 1}/${patterns.razaoSocial.length}:`);
                console.log(`Regex: ${pattern.toString()}`);

                recipientMatch = text.match(pattern);
                if (recipientMatch) {
                    matchedPattern = 'razaoSocial';
                    console.log(`‚úÖ SUCESSO! Raz√£o Social encontrada com padr√£o ${index + 1}:`);
                    console.log(`- Valor bruto capturado: "${recipientMatch[1]}"`);
                    console.log(`- Match completo: "${recipientMatch[0]}"`);
                    break;
                } else {
                    console.log(`‚ùå Padr√£o ${index + 1} n√£o encontrou match`);
                }
            }
        }

        // üìã PRIORIDADE 3: FALLBACK - Tentar campo "Favorecido" (documentos mais antigos)
        if (!recipientMatch) {
            console.log('üéØ TESTANDO PADR√ïES DE FAVORECIDO (FALLBACK):');
            console.log('‚ÑπÔ∏è Nome Fantasia e Raz√£o Social n√£o encontrados, tentando Favorecido...');

            for (const [index, pattern] of patterns.favorecido.entries()) {
                console.log(`üîç Testando padr√£o Favorecido ${index + 1}/${patterns.favorecido.length}:`);
                console.log(`Regex: ${pattern.toString()}`);

                recipientMatch = text.match(pattern);
                if (recipientMatch) {
                    matchedPattern = 'favorecido';
                    console.log(`‚úÖ SUCESSO! Favorecido encontrado com padr√£o ${index + 1}:`);
                    console.log(`- Valor bruto capturado: "${recipientMatch[1]}"`);
                    console.log(`- Match completo: "${recipientMatch[0]}"`);
                    break;
                } else {
                    console.log(`‚ùå Padr√£o ${index + 1} n√£o encontrou match`);
                }
            }
        }

        if (recipientMatch) {
            console.log('üéØ PROCESSAMENTO DO NOME ENCONTRADO:');
            console.log(`üìù Valor bruto original: "${recipientMatch[1]}"`);
            console.log(`üè∑Ô∏è Tipo de campo usado: ${matchedPattern}`);
            console.log(`üìç Posi√ß√£o no texto: ${text.indexOf(recipientMatch[0])}`);

            const name = this.cleanRecipientName(recipientMatch[1]);
            console.log(`üßπ Nome ap√≥s limpeza: "${name}"`);

            // Valida√ß√£o adicional: se o nome limpo ainda cont√©m dados banc√°rios, rejeitar
            if (name === 'NENHUM NOME EXTRA√çDO') {
                console.log('‚ùå REJEI√á√ÉO: Nome limpo resultou em "NENHUM NOME EXTRA√çDO"');
                result.recipient = 'NENHUM NOME EXTRA√çDO';
                result.success = false;
            } else {
                result.recipient = name;
                result.success = true;
                console.log('‚úÖ SUCESSO: Nome v√°lido extra√≠do e processado');

                // Log especial quando o campo correto √© usado
                if (matchedPattern === 'nomeFantasia') {
                    console.log('üèÜ CAMPO PRIORIT√ÅRIO: Nome extra√≠do do campo "Nome Fantasia Benefici√°rio"');
                } else if (matchedPattern === 'razaoSocial') {
                    console.log('üìã CAMPO SECUND√ÅRIO: Nome extra√≠do do campo "Raz√£o Social"');
                } else if (matchedPattern === 'favorecido') {
                    console.log('üîÑ CAMPO FALLBACK: Nome extra√≠do do campo "Favorecido"');
                } else {
                    console.log('‚ùì CAMPO DESCONHECIDO: Nome extra√≠do de campo n√£o identificado');
                }
            }
        } else {
            console.log('‚ùå FALHA TOTAL NA EXTRA√á√ÉO DE NOME:');
            console.log('üîç Nenhum padr√£o conseguiu extrair um nome v√°lido');
            console.log('üìã Iniciando an√°lise detalhada para debug...');

            // Debug: mostrar texto para an√°lise manual
            console.log('üìÑ TEXTO COMPLETO PARA AN√ÅLISE MANUAL:');
            const lines = text.split('\n').slice(0, 20);
            lines.forEach((line, index) => {
                if (line.trim()) {
                    console.log(`Linha ${index + 1}: "${line.trim()}"`);
                }
            });

            // Debug especial: procurar qualquer ocorr√™ncia dos campos relevantes
            const nomeFantasiaLines = text.split('\n').filter(line =>
                line.toUpperCase().includes('NOME FANTASIA')
            );
            const razaoSocialLines = text.split('\n').filter(line =>
                line.toUpperCase().includes('RAZ√ÉO SOCIAL') || line.toUpperCase().includes('RAZAO SOCIAL')
            );
            const favorecidoLines = text.split('\n').filter(line =>
                line.toUpperCase().includes('FAVORECIDO')
            );

            if (nomeFantasiaLines.length > 0) {
                console.log('üìã LINHAS COM "NOME FANTASIA" ENCONTRADAS:');
                nomeFantasiaLines.forEach((line, index) => {
                    console.log(`${index + 1}. "${line.trim()}"`);
                });
            }

            if (razaoSocialLines.length > 0) {
                console.log('üìã LINHAS COM "RAZ√ÉO SOCIAL" ENCONTRADAS:');
                razaoSocialLines.forEach((line, index) => {
                    console.log(`${index + 1}. "${line.trim()}"`);
                });
            }

            if (favorecidoLines.length > 0) {
                console.log('üìã LINHAS COM "FAVORECIDO" ENCONTRADAS:');
                favorecidoLines.forEach((line, index) => {
                    console.log(`${index + 1}. "${line.trim()}"`);
                });
            }
        }

        console.groupEnd();

        // Extrair valor usando l√≥gica robusta
        this.extractValueRobust(text, result);
    }

    // Extrair dados de boleto Bradesco
    extractBoletoData(text, result) {


        const patterns = {
            // üî• PRIORIDADE M√ÅXIMA: Campo "Favorecido"
            favorecido: [
                // Padr√£o ESPEC√çFICO PARA TED: Favorecido: seguido de nome at√© CPF/CNPJ
                /Favorecido:\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9]+?)(?=\s*(?:CPF|CNPJ))/i,

                // Padr√£o RIGOROSO 1: Favorecido: seguido do nome na mesma linha
                /Favorecido:\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:CPF|CNPJ|R\$|\d{2}\.\d{3}|[\r\n]|$))/i,

                // Padr√£o RIGOROSO 2: Favorecido com espa√ßos seguido do nome
                /Favorecido\s+([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:CPF|CNPJ|R\$|\d{2}\.\d{3}|[\r\n]|$))/i,

                // Padr√£o RIGOROSO 3: Favorecido com quebra de linha
                /Favorecido[:\s]*[\n\r]\s*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:CPF|CNPJ|R\$|\d{2}\.\d{3}|[\r\n]|$))/i,

                // Padr√£o FLEX√çVEL: Favorecido seguido de nome at√© pr√≥ximo campo banc√°rio
                /Favorecido[:\s]+([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9]{3,50}?)(?=\s*(?:CPF|CNPJ|Banco|Ag√™ncia|\d{3}[\.\-]|[\r\n]|$))/i
            ],
            // üìã PRIORIDADE 2: Raz√£o Social
            razaoSocial: [
                // Padr√£o RIGOROSO 1: Raz√£o Social: seguido do nome
                /Raz√£o\s+Social[:\s]*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:CPF|CNPJ|R\$|\d{2}\.\d{3}|[\r\n]|$))/i,

                // Padr√£o RIGOROSO 2: Razao Social (sem acento): seguido do nome  
                /Razao\s+Social[:\s]*([A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï][A-Z√Å√ä√á√ï√ú√ö√Ä√Ç√É√â√ä√ç√ì√î√ï\s&.\-\/0-9DE DA DO PROD LTDA ME SA EIRELI]{3,80}?)(?=\s*(?:CPF|CNPJ|R\$|\d{2}\.\d{3}|[\r\n]|$))/i
            ]
        };

        let recipientMatch = null;
        let matchedPattern = '';

        // üî• PRIORIDADE 1: SEMPRE tentar FAVORECIDO primeiro


        for (const pattern of patterns.favorecido) {
            recipientMatch = text.match(pattern);
            if (recipientMatch) {
                matchedPattern = 'favorecido';


                break;
            }
        }

        // üìã PRIORIDADE 2: Tentar Raz√£o Social apenas se n√£o encontrou Favorecido
        if (!recipientMatch) {


            for (const pattern of patterns.razaoSocial) {
                recipientMatch = text.match(pattern);
                if (recipientMatch) {
                    matchedPattern = 'razaoSocial';


                    break;
                }
            }
        }

        if (recipientMatch) {




            const name = this.cleanRecipientName(recipientMatch[1]);


            // Valida√ß√£o adicional: se o nome limpo ainda cont√©m dados banc√°rios, rejeitar
            if (name === 'NENHUM NOME EXTRA√çDO') {

                result.recipient = 'NENHUM NOME EXTRA√çDO';
                result.success = false;
            } else {
                result.recipient = name;
                result.success = true;

                // Log especial quando o campo "Favorecido" √© usado em boleto
                if (matchedPattern === 'favorecido') {


                } else if (matchedPattern === 'razaoSocial') {


                } else {

                }
            }
        } else {



            // Debug especial: procurar qualquer ocorr√™ncia de "Favorecido" ou "Raz√£o Social"
            const favorecidoLines = text.split('\n').filter(line =>
                line.toUpperCase().includes('FAVORECIDO')
            );
            const razaoSocialLines = text.split('\n').filter(line =>
                line.toUpperCase().includes('RAZ√ÉO SOCIAL') || line.toUpperCase().includes('RAZAO SOCIAL')
            );

            if (favorecidoLines.length > 0) {

                favorecidoLines.forEach((line, index) => {

                });
            }

            if (razaoSocialLines.length > 0) {

                razaoSocialLines.forEach((line, index) => {

                });
            }
        }

        // Extrair valor usando l√≥gica robusta
        this.extractValueRobust(text, result);
    }

    // L√≥gica robusta para extra√ß√£o de valores (inspirada no Ita√∫)
    extractValueRobust(text, result) {



        // Padr√µes hier√°rquicos de valor (do mais espec√≠fico ao mais gen√©rico)
        const valuePatterns = [
            // Padr√µes espec√≠ficos do Bradesco (baseado na imagem: 130.600,00)
            { pattern: /Valor\s*(?:Total|da\s+Transa√ß√£o|do\s+Boleto|da\s+Transfer√™ncia)[:\s]*R?\$?\s*([\d]{1,3}(?:\.[\d]{3})*,[\d]{2})/i, name: 'valorEspecifico' },
            { pattern: /Valor[:\s]*R?\$?\s*([\d]{1,3}(?:\.[\d]{3})*,[\d]{2})/i, name: 'valor' },
            { pattern: /Total[:\s]*R?\$?\s*([\d]{1,3}(?:\.[\d]{3})*,[\d]{2})/i, name: 'total' },

            // Padr√µes com R$ expl√≠cito (formato brasileiro)
            { pattern: /R\$\s*([\d]{1,3}(?:\.[\d]{3})*,[\d]{2})/gi, name: 'valorComRS' },
            { pattern: /R\$\s*([\d]+,[\d]{2})/gi, name: 'valorSimples' },

            // Padr√µes sem s√≠mbolo mas formato brasileiro claro
            { pattern: /([\d]{1,3}(?:\.[\d]{3})+,[\d]{2})/g, name: 'formatoBrasileiroCompleto' },
            { pattern: /([\d]{4,},[\d]{2})/g, name: 'formatoBrasileiroSimples' },

            // Padr√µes mais gen√©ricos
            { pattern: /\$\s*([\d.,]+)/gi, name: 'simboloDolar' },
            { pattern: /([\d]+,[\d]{2})/g, name: 'ultimoRecurso' }
        ];

        let valueFound = false;

        for (const { pattern, name } of valuePatterns) {
            let matches;

            if (pattern.global) {
                matches = [...text.matchAll(pattern)];
            } else {
                const match = text.match(pattern);
                matches = match ? [match] : [];
            }

            if (matches.length > 0) {


                // Processar todos os valores encontrados
                const values = matches
                    .map(match => ({
                        original: match[1],
                        parsed: this.parseValue(match[1])
                    }))
                    .filter(item => {
                        // Filtrar valores que fazem sentido (entre R$ 0,01 e R$ 999.999.999,99)
                        return item.parsed > 0.01 && item.parsed < 999999999.99;
                    });



                if (values.length > 0) {
                    // Para valores √∫nicos, usar diretamente
                    if (values.length === 1) {
                        result.value = this.formatValue(values[0].original);

                        valueFound = true;
                        break;
                    } else {
                        // Para m√∫ltiplos valores, usar estrat√©gia inteligente
                        const bestValue = this.selectBestValue(values, name);
                        if (bestValue) {
                            result.value = this.formatValue(bestValue.original);

                            valueFound = true;
                            break;
                        }
                    }
                }
            }
        }

        if (!valueFound) {


            // Debug melhorado: mostrar todos os n√∫meros encontrados no texto
            const allNumbers = text.match(/[\d.,]+/g);
            if (allNumbers) {


                // Tentar encontrar valores que pare√ßam monet√°rios
                const possibleValues = allNumbers.filter(num => {
                    const parsed = this.parseValue(num);
                    return parsed > 0.01 && parsed < 999999999.99 && num.includes(',');
                });

                if (possibleValues.length > 0) {

                    // Usar o maior valor encontrado como fallback
                    const maxValue = possibleValues.reduce((max, val) => {
                        return this.parseValue(val) > this.parseValue(max) ? val : max;
                    });
                    result.value = this.formatValue(maxValue);

                    valueFound = true;
                }
            }

            // Debug: mostrar linhas que cont√™m n√∫meros
            const lines = text.split('\n');

            lines.forEach((line, index) => {
                if (line.match(/[\d,]+/) && line.trim()) {

                }
            });
        }
    }

    // Selecionar o melhor valor entre m√∫ltiplos encontrados
    selectBestValue(values, patternName) {
        if (values.length === 0) return null;

        // Para padr√µes espec√≠ficos, pegar o maior valor (mais prov√°vel de ser o principal)
        if (['valorTotal', 'valor', 'total'].includes(patternName)) {
            return values.reduce((max, item) => item.parsed > max.parsed ? item : max);
        }

        // Para padr√µes gen√©ricos, aplicar filtros adicionais
        if (['valorGenerico', 'formatoBrasileiro'].includes(patternName)) {
            // Filtrar valores muito pequenos (menores que R$ 1,00)
            const significantValues = values.filter(item => item.parsed >= 1.00);

            if (significantValues.length === 1) {
                return significantValues[0];
            } else if (significantValues.length > 1) {
                // Se h√° m√∫ltiplos valores significativos, pegar o maior
                return significantValues.reduce((max, item) => item.parsed > max.parsed ? item : max);
            }
        }

        // Fallback: retornar o maior valor
        return values.reduce((max, item) => item.parsed > max.parsed ? item : max);
    }

    // Parse value string to number
    parseValue(valueStr) {
        if (!valueStr || typeof valueStr !== 'string') return 0;

        // Remove espa√ßos e caracteres inv√°lidos
        let cleanValue = valueStr.trim().replace(/[^\d.,]/g, '');

        // Se tem ponto e v√≠rgula, assumir formato brasileiro (1.234,56)
        if (cleanValue.includes('.') && cleanValue.includes(',')) {
            cleanValue = cleanValue.replace(/\./g, '').replace(',', '.');
        }
        // Se tem apenas v√≠rgula, assumir decimal brasileiro (1234,56)
        else if (cleanValue.includes(',') && !cleanValue.includes('.')) {
            cleanValue = cleanValue.replace(',', '.');
        }
        // Se tem apenas ponto, verificar se √© separador de milhar ou decimal
        else if (cleanValue.includes('.')) {
            const parts = cleanValue.split('.');
            if (parts.length === 2 && parts[1].length <= 2) {
                // Provavelmente decimal: 1234.56
                cleanValue = cleanValue;
            } else {
                // Provavelmente separador de milhar: 1.234
                cleanValue = cleanValue.replace(/\./g, '');
            }
        }

        const numValue = parseFloat(cleanValue);
        return isNaN(numValue) ? 0 : numValue;
    }

    // Format value for display
    formatValue(valueStr) {
        const numValue = this.parseValue(valueStr);
        if (isNaN(numValue) || numValue <= 0) {
            return '0,00';
        }
        return numValue.toLocaleString('pt-BR', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
    }

    // Limpar e formatar nome do destinat√°rio
    cleanRecipientName(rawName) {


        if (!rawName) {

            return 'NENHUM NOME EXTRA√çDO';
        }

        let name = rawName.trim();


        // Teste espec√≠fico para TAURUS (exemplo real)
        if (name.includes('TAURUS')) {


        }

        // Remover prefixos comuns (incluindo "Favorecido" com prioridade)
        name = name.replace(/^(Favorecido|Nome|Raz√£o Social|Benefici√°rio|Cedente|Empresa)[:\s]*/i, '');

        // Remover sufixos comuns (CPF, CNPJ, etc.) mas de forma mais precisa
        name = name.replace(/\s+(CPF|CNPJ|RG)[:\s]*[\d\.\-\/]*$/i, '');

        // Remover apenas n√∫meros que parecem ser documentos (n√£o afetar nomes com n√∫meros v√°lidos)
        name = name.replace(/\s+\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/, ''); // CNPJ
        name = name.replace(/\s+\d{3}\.\d{3}\.\d{3}-\d{2}$/, ''); // CPF

        // Remover c√≥digos e n√∫meros no final, mas preservar n√∫meros que fazem parte do nome
        name = name.replace(/\s+\d{3,}[\d.-]*$/, '');

        // Remover padr√µes espec√≠ficos que aparecem ap√≥s favorecidos
        name = name.replace(/\s+R\$.*$/i, ''); // Remove valor que √†s vezes aparece depois
        name = name.replace(/\s+Valor.*$/i, ''); // Remove "Valor" que pode aparecer
        name = name.replace(/\s+\d{3}\..*$/i, ''); // Remove c√≥digos que come√ßam com 3 d√≠gitos
        name = name.replace(/\s+Ag√™ncia.*$/i, ''); // Remove "Ag√™ncia" que pode aparecer
        name = name.replace(/\s+Conta.*$/i, ''); // Remove "Conta" que pode aparecer

        // Normalizar espa√ßos m√∫ltiplos
        name = name.replace(/\s+/g, ' ').trim();

        // Remover caracteres especiais problem√°ticos, mas manter alguns v√°lidos para empresas
        name = name.replace(/[^\w√Ä-√ø\s&.\-,]/g, '');

        // Remover espa√ßos extras novamente
        name = name.replace(/\s+/g, ' ').trim();

        // Teste espec√≠fico para TAURUS ap√≥s limpeza inicial
        if (name.includes('TAURUS')) {

        }

        // Valida√ß√µes espec√≠ficas para campo "Favorecido"
        // Se o nome cont√©m palavras-chave do banco ou dados banc√°rios, provavelmente √© inv√°lido
        const invalidKeywords = ['BRADESCO', 'BANCO', 'AGENCIA', 'AG√äNCIA', 'CONTA', 'OPERACAO', 'OPERA√á√ÉO', 'TRANSACAO', 'TRANSA√á√ÉO', 'TRANSFERENCIA', 'TRANSFER√äNCIA'];
        for (const keyword of invalidKeywords) {
            if (name.toUpperCase().includes(keyword)) {



                return 'NENHUM NOME EXTRA√çDO';
            }
        }

        // Valida√ß√£o adicional: rejeitar se come√ßar com n√∫meros (como c√≥digos de ag√™ncia)
        if (/^\d/.test(name)) {


            return 'NENHUM NOME EXTRA√çDO';
        }

        // Valida√ß√£o adicional: rejeitar se cont√©m apenas n√∫meros e espa√ßos
        if (/^[\d\s]+$/.test(name)) {


            return 'NENHUM NOME EXTRA√çDO';
        }

        // Validar se o nome resultante faz sentido
        if (name.length < 3) {


            return 'NENHUM NOME EXTRA√çDO';
        }

        // Ser mais flex√≠vel com nomes de uma palavra - permitir se tiver 3+ caracteres
        // Isso √© importante para empresas como "GOODYEAR" ou nomes simplificados
        if (name.split(' ').length === 1 && name.length < 3) {


            return 'NENHUM NOME EXTRA√çDO';
        }

        // Converter para uppercase para consist√™ncia
        name = name.toUpperCase();

        // Limitar tamanho para evitar nomes muito longos
        if (name.length > 60) {
            name = name.substring(0, 60).trim();

        }

        // Teste final para TAURUS
        if (name.includes('TAURUS')) {

        }


        return name;
    }

    // Gerar nome do arquivo
    generateFileName(extractedData) {


        if (!extractedData.success || !extractedData.recipient || extractedData.recipient === 'NENHUM NOME EXTRA√çDO' || extractedData.recipient === 'DESTINAT√ÅRIO N√ÉO ENCONTRADO') {
            const fallbackName = `Bradesco_${extractedData.type}_Pagina_${extractedData.pageNumber}.pdf`;


            return fallbackName;
        }

        const recipient = extractedData.recipient.trim();
        const value = extractedData.value || '0,00';

        // Limpar nome do destinat√°rio para nome de arquivo
        const cleanRecipient = recipient
            .replace(/[<>:"/\\|?*]/g, '') // Removes invalid characters for file names
            .replace(/\s+/g, ' ')
            .trim()
            .substring(0, 40); // Limit size to avoid very long names

        // Format: [NAME] value R$ [VALUE].pdf
        const fileName = `${cleanRecipient} valor R$ ${value}.pdf`;

        return fileName;
    }

    // Validar dados extra√≠dos
    validateExtractedData(data) {
        return {
            isValid: data.success && data.recipient && data.recipient !== 'NENHUM NOME EXTRA√çDO' && data.recipient !== 'DESTINAT√ÅRIO N√ÉO ENCONTRADO',
            errors: data.success ? [] : ['N√£o foi poss√≠vel extrair dados v√°lidos'],
            warnings: []
        };
    }

    // √çcones e cores para UI
    getTypeIcon(type) {
        const icons = {
            'Transfer√™ncia': 'fas fa-exchange-alt',
            'Boleto': 'fas fa-barcode',
            'Desconhecido': 'fas fa-question-circle',
            'Erro': 'fas fa-exclamation-triangle'
        };
        return icons[type] || 'fas fa-file';
    }

    getTypeColor(type) {
        const colors = {
            'Transfer√™ncia': 'bg-blue-100 text-blue-800',
            'Boleto': 'bg-orange-100 text-orange-800',
            'Desconhecido': 'bg-gray-100 text-gray-800',
            'Erro': 'bg-red-100 text-red-800'
        };
        return colors[type] || 'bg-gray-100 text-gray-800';
    }

    // Obter informa√ß√µes do template
    getTemplateInfo() {
        return {
            name: this.bankName,
            version: '3.0.0',
            supportedTypes: this.supportedTypes,
            description: 'Template SIMPLIFICADO para extra√ß√£o de dados do Bradesco - APENAS Favorecido + Raz√£o Social',
            features: [
                'Detec√ß√£o autom√°tica de tipo de documento',
                'Extra√ß√£o PRIORIT√ÅRIA do campo "Favorecido"',
                'Extra√ß√£o secund√°ria de "Raz√£o Social"',
                'M√∫ltiplos padr√µes de extra√ß√£o de valor',
                'L√≥gica inteligente para sele√ß√£o do melhor valor',
                'Suporte a formatos brasileiros de valor',
                'Logs detalhados para debug',
                'Foco EXCLUSIVO em Favorecido + Raz√£o Social'
            ],
            patterns: {
                transferencia: [
                    'Favorecido (PRIORIDADE M√ÅXIMA)',
                    'Raz√£o Social do Benefici√°rio',
                    'Valor Total'
                ],
                boleto: [
                    'Favorecido (PRIORIDADE M√ÅXIMA)',
                    'Raz√£o Social',
                    'Valor Total'
                ]
            },
            fileNameFormat: '[NOME FAVORECIDO/RAZ√ÉO SOCIAL] valor R$ [VALOR].pdf',
            excludedFields: [
                'Benefici√°rio gen√©rico',
                'Nome Fantasia',
                'Cedente',
                'Empresa',
                'Destinat√°rio gen√©rico',
                'Padr√µes de empresa',
                'Padr√µes gen√©ricos'
            ]
        };
    }

    // M√©todo de an√°lise completa para debug (chamado quando extra√ß√£o falha)
    analyzeTextForDebug(text) {
        console.group('üîç AN√ÅLISE COMPLETA DO TEXTO PARA DEBUG');




        // Analisar linhas
        const lines = text.split('\n').filter(line => line.trim());



        lines.slice(0, 20).forEach((line, index) => {

        });

        // Procurar por palavras-chave do Bradesco
        const keywords = ['BRADESCO', 'BANCO', 'TRANSA√á√ÉO', 'VALOR', 'BENEFICI√ÅRIO', 'RAZ√ÉO', 'SOCIAL'];

        keywords.forEach(keyword => {
            const count = (text.toUpperCase().match(new RegExp(keyword, 'g')) || []).length;
            if (count > 0) {

            }
        });

        // Procurar padr√µes de valor
        const possibleValues = text.match(/[\d]{1,3}(?:\.[\d]{3})*,[\d]{2}/g);
        if (possibleValues) {

        }

        // Procurar nomes em mai√∫scula
        const upperCaseWords = text.match(/[A-Z]{3,}(?:\s+[A-Z]{2,})*/g);
        if (upperCaseWords) {

        }

        console.groupEnd();
    }
}

// Registrar template globalmente
if (typeof window !== 'undefined') {
    window.BradescoTemplate = BradescoTemplate;


}
